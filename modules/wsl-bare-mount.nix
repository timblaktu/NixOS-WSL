{ config, lib, pkgs, ... }:

with lib;
let
  cfg = config.wsl.bareMounts;

  # Generate PowerShell script content for Windows-side execution
  generateMountScript = mounts: ''
    #Requires -Version 5.1
    #Requires -RunAsAdministrator

    # WSL Bare Mount Script
    # Generated by NixOS-WSL
    # This script must be executed with Administrator privileges before WSL starts

    $ErrorActionPreference = "Stop"

    function Test-DiskMounted {
        param([string]$DiskUuid)

        try {
            $output = & wsl --list --running 2>$null
            if ($LASTEXITCODE -eq 0 -and $output) {
                # WSL is running, check if disk is mounted
                $mountOutput = & wsl --exec lsblk -o UUID 2>$null | Select-String -Pattern $DiskUuid -Quiet
                return $mountOutput
            }
            return $false
        } catch {
            return $false
        }
    }

    function Mount-BareDisk {
        param(
            [string]$DiskUuid,
            [string]$Description
        )

        Write-Host "Checking disk: $Description (UUID: $DiskUuid)"

        if (Test-DiskMounted -DiskUuid $DiskUuid) {
            Write-Host "  [SKIP] Already mounted" -ForegroundColor Green
            return $true
        }

        try {
            Write-Host "  [MOUNT] Attempting to mount..." -ForegroundColor Yellow

            # Find the disk by UUID
            $disk = Get-Disk | Where-Object {
                $_.UniqueId -like "*$DiskUuid*" -or
                $_.SerialNumber -eq $DiskUuid
            }

            if (-not $disk) {
                Write-Host "  [ERROR] Disk not found in Windows" -ForegroundColor Red
                return $false
            }

            # Perform the bare mount
            & wsl --mount \\.\PHYSICALDRIVE$($disk.Number) --bare

            if ($LASTEXITCODE -eq 0) {
                Write-Host "  [SUCCESS] Mounted successfully" -ForegroundColor Green
                return $true
            } else {
                Write-Host "  [ERROR] Mount command failed with exit code $LASTEXITCODE" -ForegroundColor Red
                return $false
            }
        } catch {
            Write-Host "  [ERROR] $($_.Exception.Message)" -ForegroundColor Red
            return $false
        }
    }

    Write-Host "`n=== WSL Bare Mount Script Starting ===" -ForegroundColor Cyan
    Write-Host "Timestamp: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')"
    Write-Host "Machine: $env:COMPUTERNAME"

    $failedMounts = @()

    ${concatMapStringsSep "\n    " (mount: ''
      if (-not (Mount-BareDisk -DiskUuid "${mount.diskUuid}" -Description "${mount.mountPoint}")) {
          $failedMounts += "${mount.diskUuid}"
      }
    '') mounts}

    Write-Host "`n=== Summary ===" -ForegroundColor Cyan
    if ($failedMounts.Count -eq 0) {
        Write-Host "All disks mounted successfully" -ForegroundColor Green
        exit 0
    } else {
        Write-Host "Failed to mount $($failedMounts.Count) disk(s):" -ForegroundColor Red
        $failedMounts | ForEach-Object { Write-Host "  - $_" -ForegroundColor Red }
        exit 1
    }
  '';

  # Generate systemd service for validation
  validationService = {
    description = "Validate WSL Bare Mounts";
    after = [ "multi-user.target" ];
    wantedBy = [ "multi-user.target" ];

    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
    };

    script = ''
      set -euo pipefail

      echo "Validating WSL bare mounts..."
      MISSING_DEVICES=""

      ${concatMapStringsSep "\n" (mount: ''
        if [ ! -e "/dev/disk/by-uuid/${mount.diskUuid}" ]; then
          echo "ERROR: Block device for ${mount.mountPoint} (UUID: ${mount.diskUuid}) not found!"
          echo "  Please ensure the Windows-side mount script has been executed."
          MISSING_DEVICES="$MISSING_DEVICES ${mount.diskUuid}"
        else
          echo "OK: Found block device for ${mount.mountPoint} (UUID: ${mount.diskUuid})"
        fi
      '') cfg.mounts}

      if [ -n "$MISSING_DEVICES" ]; then
        echo ""
        echo "CRITICAL: Missing block devices detected!"
        echo "The following disks must be bare-mounted from Windows before starting WSL:"
        echo "$MISSING_DEVICES"
        echo ""
        echo "To fix this issue:"
        echo "1. Exit WSL completely (wsl --shutdown)"
        echo "2. Run the mount script as Administrator:"
        echo "   %USERPROFILE%\\.nixos-wsl\\bare-mount.ps1"
        echo "3. Restart WSL"
        echo ""
        echo "For automatic mounting, integrate this script into your WSL startup process."
        exit 1
      fi

      echo "All configured bare mounts are available."
    '';
  };

in {
  options.wsl.bareMounts = {
    enable = mkEnableOption "WSL bare disk mounting support";

    mounts = mkOption {
      type = types.listOf (types.submodule {
        options = {
          diskUuid = mkOption {
            type = types.str;
            description = ''
              UUID of the Windows physical disk to bare mount.
              This should match the UUID visible in Windows Disk Management.
            '';
            example = "abc12345-def6-7890-1234-567890abcdef";
          };

          mountPoint = mkOption {
            type = types.str;
            description = ''
              Mount point path within the WSL instance.
              This will be created as a directory if it doesn't exist.
            '';
            example = "/mnt/data";
          };

          fsType = mkOption {
            type = types.str;
            default = "ext4";
            description = ''
              Filesystem type for the mount.
              Common options: ext4, btrfs, xfs, ntfs
            '';
          };

          options = mkOption {
            type = types.listOf types.str;
            default = [ "defaults" ];
            description = ''
              Mount options to apply.
            '';
          };
        };
      });
      default = [];
      description = ''
        List of Windows disks to bare mount for use within WSL.

        These disks must be unmounted in Windows and will be exclusively
        available to WSL while mounted. The generated PowerShell script
        must be executed with Administrator privileges before starting WSL.
      '';
    };

    generateScript = mkOption {
      type = types.bool;
      default = true;
      description = ''
        Whether to generate the Windows-side PowerShell mount script.
        The script will be placed in /etc/nixos-wsl/bare-mount.ps1 and
        copied to the Windows user profile on activation.
      '';
    };

    validateOnBoot = mkOption {
      type = types.bool;
      default = true;
      description = ''
        Whether to validate that configured disks are mounted at boot.
        This helps catch configuration issues early.
      '';
    };
  };

  config = mkIf cfg.enable {
    assertions = [
      {
        assertion = cfg.mounts != [];
        message = "wsl.bareMounts.enable is true but no mounts are configured";
      }
    ];

    # Create mount points and systemd mount units
    systemd.mounts = map (mount: {
      what = "/dev/disk/by-uuid/${mount.diskUuid}";
      where = mount.mountPoint;
      type = mount.fsType;
      options = concatStringsSep "," mount.options;
      wantedBy = [ "multi-user.target" ];
    }) cfg.mounts;

    systemd.tmpfiles.rules = map (mount:
      "d ${mount.mountPoint} 0755 root root -"
    ) cfg.mounts;

    # Generate the PowerShell script
    environment.etc."nixos-wsl/bare-mount.ps1" = mkIf cfg.generateScript {
      text = generateMountScript cfg.mounts;
      mode = "0644";
    };

    # Validation service
    systemd.services.validate-wsl-bare-mounts = mkIf cfg.validateOnBoot validationService;

    # Copy script to Windows user profile on activation
    system.activationScripts.wsl-bare-mount-script = mkIf cfg.generateScript ''
      WINDOWS_USER=$(${pkgs.coreutils}/bin/whoami)
      WINDOWS_HOME="/mnt/c/Users/$WINDOWS_USER"
      WSL_DIR="$WINDOWS_HOME/.nixos-wsl"

      if [ -d "$WINDOWS_HOME" ]; then
        echo "Installing WSL bare mount script to Windows profile..."
        mkdir -p "$WSL_DIR"

        # Copy the script
        cp /etc/nixos-wsl/bare-mount.ps1 "$WSL_DIR/bare-mount.ps1" 2>/dev/null || true

        # Create a simple batch file wrapper for easier execution
        cat > "$WSL_DIR/bare-mount.bat" <<'EOF'
    @echo off
    powershell.exe -ExecutionPolicy Bypass -File "%~dp0bare-mount.ps1"
    pause
    EOF

        echo "Mount script installed to: $WSL_DIR"
        echo "Execute as Administrator before starting WSL:"
        echo "  $WSL_DIR\\bare-mount.ps1"
      else
        echo "Warning: Could not find Windows home directory"
      fi
    '';

    # Documentation
    environment.etc."nixos-wsl/bare-mount-readme.txt" = mkIf cfg.generateScript {
      text = ''
        WSL Bare Mount Configuration
        =============================

        This NixOS system is configured to use bare-mounted Windows disks.
        These disks must be mounted from Windows BEFORE starting WSL.

        Configured mounts:
        ${concatMapStringsSep "\n" (mount:
          "  - ${mount.diskUuid} -> ${mount.mountPoint} (${mount.fsType})"
        ) cfg.mounts}

        Setup Instructions:
        -------------------
        1. The mount script has been copied to:
           %USERPROFILE%\.nixos-wsl\bare-mount.ps1

        2. This script must be run as Administrator before WSL starts.

        3. For automatic mounting, you can:
           a. Add it to your Windows Task Scheduler
           b. Call it from your terminal startup script
           c. Create a Windows service

        4. To manually mount, run in an elevated PowerShell:
           & "$env:USERPROFILE\.nixos-wsl\bare-mount.ps1"

        Troubleshooting:
        ----------------
        - Ensure the disk UUIDs match your Windows disk configuration
        - The disks must not be in use by Windows
        - WSL must have permission to access raw disk devices
        - Check Event Viewer for WSL-related errors

        For more information, see:
        https://docs.microsoft.com/en-us/windows/wsl/wsl2-mount-disk
      '';
    };
  };
}
